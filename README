.. -*- coding: utf-8 -*-

************************************
The Framework of th sub command for
************************************

Installing
==========

Use ``setup.py`` in the source code root directory::

    $ python setup.py install

How to use
============

This is a description of how to use the jumon.


Create the top command
-------------------------------


testcmd/command/__init__.py::
  
    import jumon

    def main():
        jumon.entry(__name__)

setup.py::

    #-*- coding: utf-8 -*-
    from setuptools import setup, find_packages
    setup(
        name='testcmd',
        version='1',
        license='BSD',
        author='TakesxiSximada',
        author_email='takesxi.sximada@gmail.com',
        packages=find_packages(),
        entry_points = """\
        [console_scripts]
        testcmd = testcmd.command:main
        """
    )


This is important::

        entry_points = """\
        [console_scripts]
        testcmd = testcmd.command:main
        """

Create sub commands
-------------------------------


testcmd/command/aaa.py::

    def main(argv):
        print 'OK'


testcmd/command/bbb/__init__.py::

    def main(argv):
        print 'bbb'

testcmd/command/bbb/ccc.py::

    def main(argv):
        print 'ccc'

example::

    $ pip install ./examples   
    Unpacking ./examples
      Running setup.py egg_info for package from 

    Cleaning up...

    $ testcmd aaa
    OK

    $ testcmd bbb
    bbb

    $ testcmd bbb ccc
    ccc

    $ testcmd bbb ddd a
    a_func []
    $ testcmd bbb ddd b
    b_func []
    $ testcmd bbb ddd c
    c_func []


Do you want to transparenting the undefined options?
---------------------------------------------------------

You can use *jumon.TransparentOptionParser()* class.
