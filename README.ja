.. -*- coding: utf-8 -*-

************************************************************
jumon - サブコマンドのためのフレームワーク
************************************************************

jumonはサブコマンドを実装するための小さなフレームワークです。
パッケージ内のサブモジュールの階層構造を、
そのままサブコマンドとして実装することができます。
jumonは渡された引数からimport可能なサブモジュールを探し出し
そのサブモジュール内のmain関数を引数付きで実行します。

サブモジュールの階層構造をそのままサブコマンドとして実装しますので、
例えばtreeコマンド等でサブコマンドがどのような階層構造になっているのかを
表示する事ができます。
どのコマンドがどこに定義されているのか非常に見やすくなるでしょう。

あなたがサブコマンドを作成しようとしているのであれば
ぜひjumonの導入を検討してください。
きっとあなたのサブコマンドは見通しがよくなるでしょう。


インストール
============================

インストールは非常に簡単です。::

    $ pip install jumon

使い方
==============

使い方も非常に簡単です。
ここではtestcmdというパッケージを作成して
そのサブパッケージcommmand配下にサブコマンドを実装していきます。

パッケージ用のディレクトリを作成しておきます。
::

    $ mkdir testcmd
    $ touch testcmd/__init__.py
    $ mkdir testcmd/command


まずコマンドの最上位となるパッケージに次を記述します。

::

    $ touch testcmd/command/__init__.py


testcmd/command/__init__.py::

    import jumon

    def main():
        jumon.entry(__name__)


jumon.entry(__name__)を記述したパッケージの配下にある
サブパッケージがコマンド検索の対象になります。
jumon.entry(__name__)の記述はサブパッケージでもかまいません。


次にサブコマンドとなるサブモジュールを作成します。
サブコマンド名は aaa です。

::

    $ touch testcmd/command/aaa.py

testcmd/command/aaa.py::

    def main(argv):
        print 'OK'
        return 0


このコマンドでは *OK* という文字列をprintして
終了ステータス0で終了します。


サブコマンドのサブコマンドも実装できます。
その場合は最下位のサブコマンド以外は、
モジュールではなくパッケージとして定義する必要があります。


::

    $ mkdir testcmd/command/bbb
    $ touch testcmd/command/bbb/__init__.py
    $ touch testcmd/command/bbb/ccc.py


testcmd/command/bbb/__init__.py::

    def main(argv):
        print 'bbb'
        return 1

testcmd/command/bbb/ccc.py::

    def main(argv):
        print 'ccc'
        return 2


bbb というサブコマンドと bbb ccc というサブコマンドを実装しました。
bbb というサブコマンドは *bbb* という文字列をprintした後、
終了ステータス1で終了します。
bbb ccc というサブコマンドは *ccc* という文字列をprintした後、
終了ステータス2で終了します。


最後に実際にコマンドを設置してみましょう。
最上位のコマンドの名前は何でもよいので適当な名前のファイルを作成します。
そしてjumon.entry(__entry__)を定義した関数を呼ぶようにしてください。
今回はtest.pyというファイルにコマンドを定義します。

上記で作成したモジュール全体をimportできる状態にしてください。
(site-packages/配下に設置すればよいです。)


次のファイルを作成します。

::

    $ touch test.py

test.py::

    #! /usr/bin/env python
    import testcmd.command
    
    def main():
        testcmd.command.main()

    if __name__ == '__main__':
        main()

作成したファイルに実行権限を与えます。::

    $ chmod 755 test.py

では実行してみましょう。
引数を渡さないとusageを表示します。::

    $ ./test.py    
    Usage: test.py [options]

    test.py: error: Command Not Found: 

サブコマンドaaaはOKをprintします。::

    $ ./test.py aaa
    OK
    $ echo $?
    0

サブコマンドbbbは文字列bbbをprintします。::

    $ ./test.py bbb
    bbb
    $ echo $?
    1

サブコマンドcccは文字列cccをprintします。::

    $ ./test.py bbb ccc
    ccc
    $ echo $?
    2


setup.pyでコマンドを作成する場合は？
----------------------------------------------
setup.pyに次の記述をすると
*python setup.py install* 実行時に *testcmd* というコマンドが配置されるでしょう。

::

    #-*- coding: utf-8 -*-
    from setuptools import setup, find_packages
    setup(
        name='testcmd',
        version='1',
        license='BSD',
        author='TakesxiSximada',
        author_email='takesxi.sximada@gmail.com',
        packages=find_packages(),
        entry_points = """\
        [console_scripts]
        testcmd = testcmd.command:main
        """
    )


ここが重要です。::

        entry_points = """\
        [console_scripts]
        testcmd = testcmd.command:main
        """


定義していないオプションを透過したい時は?
-------------------------------------------------

*jumon.TransparentOptionParser()* を使ってください。
+optparse.OptionParser()* では定義されていないオプションを渡した場合エラーしますが
*jumon.TransparentOptionParser()* ではエラーしません。
定義されてないオプションは
*jumon.TransparentOptionParser.parse_args()* の第2戻り値として返されます。


例えば既存のコマンドをラッピングしたい場合オペレータが与えたオプションは
そのまま既存のコマンドに渡したいところですが、
引数によって事前の処理をかえたい場合は
事前に *optparse.OptionParser()* で解析したい場合があります。
*optparse.OptionParser()* は登録していないオプション文字列が渡された場合エラーします。
しかし *jumon.TransparentOptionParser()* は無視して引数と同じように扱うのです。
従って返された *args* を既存のコマンドに渡してやればよいのです。

この例では定義されていないオプション文字列を透過しています。::

    >>> import jumon
    >>> parser = jumon.TransparentOptionParser()
    >>> opts, args = parser.parse_args(['-f', '-n', '1'])
    >>> args
    ['-f', '-n', '1']


オプションとして認識されていないため *opts* のアトリビュートととしては存在しません。::

    >>> opts.f
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AttributeError: Values instance has no attribute 'f'
    >>> opts.n
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    AttributeError: Values instance has no attribute 'n'

